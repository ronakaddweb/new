<?php
// $Id: erp_sms_message.module,v 1.5.2.5 2009/12/26 00:22:23 simon Exp $

/* TODO db_next_id() is gone, and replaced as db_last_insert_id()
   Since db_next_id() introduce some problems, and the use of this function
   can be replaced by database level auto increment handling, db_next_id()
   is now gone and replaced as db_last_insert_id() with help of serial type
   under Schema API (check out http://drupal.org/node/149176 for more details).
   Please refer to drupal_write_record() as demonstration. */

/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO Change 'Submit' to 'Save' on buttons
   It has been agreed on that the description 'Submit' for a button is not a
   good choice since it does not indicate what actually happens. While for
   example on node editing forms, 'Preview' and 'Delete' describe exactly what
   will happen when the user clicks on the button, 'Submit' only gives a vague
   idea. When labelling your buttons, make sure that it is clear what this
   button does when the user clicks on it. */

/* TODO Node previews and adding form fields to the node form.
   There is a subtle but important difference in the way node previews (and other
   such operations) are carried out when adding or editing a node. With the new
   Forms API, the node form is handled as a multi-step form. When the node form
   is previewed, all the form values are submitted, and the form is rebuilt with
   those form values put into $form['#node']. Thus, form elements that are added
   to the node form will lose any user input unless they set their '#default_value'
   elements using this embedded node object. */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function erp_sms_message_theme() {
  return array(
  );
}; */


/* TODO
   An argument for replacements has been added to format_plural(),
   escaping and/or theming the values just as done with t().*/

/**
 * @file
 * Provide a mechanism to send SMS messages to staff.
 * Requires smsgateway, and profile module, with
 * some fields defined:
 * 1. a single line text field called mobile
 * 2. notify of new jobs?, a checkbox called notify_new_jobs
 *
 */

/**
 * Provide some basic information on what this module does
 */
function erp_sms_message_help($path, $arg) {
  switch ($page) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('ERP sms message module.');
      break;
  }
}

function erp_sms_message_perm() {
  return array('erp sms message');
}

function erp_sms_message_menu() {
  $items['erp/sms_message'] = array(
    'title' => 'sms message',
    'page callback' => 'erp_sms_message_form',
    'access arguments' => array('erp sms message')
  );

  $items['erp/sms_message_send'] = array(
    'page callback' => 'erp_sms_message_send',
    'type' => MENU_CALLBACK,
    'access arguments' => array('erp sms message')
  );

  return $items;
}

/*
 * Latch onto the erp_job_insert hook
 *
 */
function erp_sms_message_form(&$form_state) {
  $form['sms_message']['recipient'] =
    array('#prefix' => '<div class="recipient-details">',
          '#type' => 'fieldset',
          '#title' => 'recipient details',
          '#collapsible' => TRUE,
          '#tree' => FALSE,
          '#suffix' => '</div>');

  $form['sms_message']['recipient']['user'] =
    array('#type' => 'textfield',
          '#title' => t('User'),
          '#autocomplete_path' => 'user/autocomplete',
          '#default_value' => '',
          '#size' => 20,
          '#description' => t('Select the username to send the message to'));

  $form['sms_message']['recipient']['number'] =
    array('#prefix' => t('OR'),
          '#type' => 'textfield',
          '#title' => t('Number'),
          '#default_value' => '',
          '#size' => 20,
          '#description' => t('Enter the SMS number to send the message to'));

  $form['sms_message']['message'] =
    array('#type' => 'textfield',
          '#title' => t('Message'),
          '#size' => 50,
          '#maxlength' => 160,
          '#description' => t('Type your SMS message to send'));

  $form['sms_message']['submit'] =
    array('#type' => 'submit',
          '#value' => t('Send SMS'));

  $form['#action'] = url('erp/sms_message_send');

  return drupal_get_form('erp_sms_message_form', $form);
}

function erp_sms_message_send() {
  $edit = $_POST['edit'];

  $user = user_load(array('name' => $edit['user']));

  if ($user->erp_sms_enable && module_exists('smsgateway')) {
    if ($user->erp_sms_number) {
      $mobile_number = $user->erp_sms_number;
    }
    elseif ($edit['number']) {
      $mobile_number = $edit['number'];
    }
  }

  if ($mobile_number) {
    smsgateway_sendmessage($mobile_number, $edit['message']);
    drupal_set_message('SMS sent to ' . $user->name);
  }

  drupal_goto();
  return;
}

