<?php

// $Id: erp_sms.module,v 1.5.2.5 2009/12/26 00:22:23 simon Exp $

/* TODO db_next_id() is gone, and replaced as db_last_insert_id()
   Since db_next_id() introduce some problems, and the use of this function
   can be replaced by database level auto increment handling, db_next_id()
   is now gone and replaced as db_last_insert_id() with help of serial type
   under Schema API (check out http://drupal.org/node/149176 for more details).
   Please refer to drupal_write_record() as demonstration. */

/* TODO FormAPI image buttons are now supported.
   FormAPI now offers the 'image_button' element type, allowing developers to
   use icons or other custom images in place of traditional HTML submit buttons.

$form['my_image_button'] = array(
  '#type'         => 'image_button',
  '#title'        => t('My button'),
  '#return_value' => 'my_data',
  '#src'          => 'my/image/path.jpg',
); */

/* TODO Node previews and adding form fields to the node form.
   There is a subtle but important difference in the way node previews (and other
   such operations) are carried out when adding or editing a node. With the new
   Forms API, the node form is handled as a multi-step form. When the node form
   is previewed, all the form values are submitted, and the form is rebuilt with
   those form values put into $form['#node']. Thus, form elements that are added
   to the node form will lose any user input unless they set their '#default_value'
   elements using this embedded node object. */

/* TODO New user_mail_tokens() method may be useful.
   user.module now provides a user_mail_tokens() function to return an array
   of the tokens available for the email notification messages it sends when
   accounts are created, activated, blocked, etc. Contributed modules that
   wish to make use of the same tokens for their own needs are encouraged
   to use this function. */

/* TODO
   There is a new hook_watchdog in core. This means that contributed modules
   can implement hook_watchdog to log Drupal events to custom destinations.
   Two core modules are included, dblog.module (formerly known as watchdog.module),
   and syslog.module. Other modules in contrib include an emaillog.module,
   included in the logging_alerts module. See syslog or emaillog for an
   example on how to implement hook_watchdog.
function example_watchdog($log = array()) {
  if ($log['severity'] == WATCHDOG_ALERT) {
    mysms_send($log['user']->uid,
      $log['type'],
      $log['message'],
      $log['variables'],
      $log['severity'],
      $log['referer'],
      $log['ip'],
      format_date($log['timestamp']));
  }
} */

/* TODO Implement the hook_theme registry. Combine all theme registry entries
   into one hook_theme function in each corresponding module file.
function erp_sms_theme() {
  return array(
  );
}; */


/* TODO
   An argument for replacements has been added to format_plural(),
   escaping and/or theming the values just as done with t().*/

/* TODO Form buttons can define custom #submit and #validate handlers.
   All forms can have #validate and #submit properties containing lists of
   validation and submission handlers to be executed when a user submits data.
   Previously, if a form featured multiple submission buttons to initiate
   different actions (updating a record versus deleting, for example), it was
   necessary to check the incoming form_values['op'] for the name of the
   clicked button, then execute different code based on its value. Now, it is
   possible to define #validate and #submit properties on each individual form
   button if desired. */

/**
 * @file
 * Provive a user interface to set some properties for the SMS
 * modules
 */

/**
 * Provide some basic information on what this module does
 */
function erp_sms_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      // This description is shown in the listing at admin/modules.
      return t('ERP sms settings module.');
      break;
  }
}

function erp_sms_perm() {
  return array('erp sms');
}

function erp_sms_menu() {
  $items['user/%uid/erp/sms'] = array(
    'title' => 'sms details',
    'page callback' => 'erp_sms_user_details',
    'page arguments' => array(1),
    'access arguments' => TRUE,
    'type' => MENU_LOCAL_TASK,
    'weight' => -10);

  return $items;
}

function erp_sms_user_details($uid) {
  $user = user_load(array('uid' => $uid));

/* TODO The 'op' element in the form values is deprecated.
   Each button can have #validate and #submit functions associated with it.
   Thus, there should be one button that submits the form and which invokes
   the normal form_id_validate and form_id_submit handlers. Any additional
   buttons which need to invoke different validate or submit functionality
   should have button-specific functions. */
  if ($form_values['op'] == t('submit')) {
    $edit = $_POST['edit'];
    user_save($user,
              array('erp_sms_enable' => $edit['erp_sms_enable'],
                    'erp_sms_number' => $edit['erp_sms_number'],
                    'erp_sms_notify_jobs' => $edit['erp_sms_notify_jobs']));
  }

  $user = user_load(array('uid' => $uid));

  $form['erp_sms_enable'] =
    array('#type' => 'checkbox',
          '#title' => t('Enable SMS reception'),
          '#default_value' => $user->erp_sms_enable);

  $form['erp_sms_number'] =
    array('#type' => 'textfield',
          '#title' => t('SMS number'),
          '#default_value' => $user->erp_sms_number);

  $form['erp_sms_notify_jobs'] =
    array('#type' => 'checkbox',
          '#title' => t('Enable Job notification via SMS'),
          '#default_value' => $user->erp_sms_notify_jobs);

  $form['submit'] =
    array('#type' => 'button',
          '#value' => t('submit'));

  $form['#action'] = url('user/' . arg(1) . '/erp/sms');

  return drupal_get_form('sms_user_form', $form);
}

