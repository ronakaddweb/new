<?php
// $Id: erp_access.module,v 1.1.2.5 2010/03/15 05:05:59 simon Exp $

/**
 * @file
 *
 * erp access module
 *
 */

define(ERP_ACCESS_EDIT, 1);
define(ERP_ACCESS_VIEW, 2);

/**
 * Implementation of hook_help().
 *
 * @param unknown_type $path
 * @param unknown_type $arg
 */
function erp_access_help($path, $arg) {
  switch ($path) {
  case 'admin/modules#description':
    return t('ERP access module.');
    break;
  }
  return NULL;
}

/**
 * Implementation of hook_perm().
 */
function erp_access_perm() {
  return array('admin erp access');
}

/**
 * Implementation of hook_menu().
 *
 */
function erp_access_menu() {
  $items['node/%node/erp'] = array(
    'title' => 'Erp', // Capitals, like the other std menus
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erp_access_manage', 1),
    'access arguments' => array(1),
    'access callback' => 'erp_access_menu_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  $items['node/%node/erp/manage'] = array(
    'title' => 'Users for this customer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erp_access_manage', 1),
    'access arguments' => array('admin erp access'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );

  $items['node/%node/erp/remove/%user/%'] = array(
    'title' => 'Remove access for this user',
    'page callback' => 'erp_access_remove',
    'page arguments' => array(1, 4, 5),
    'access arguments' => array('admin erp access'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/erp/access'] = array(
    'title' => 'Access',
    'description' => t('Configure erp access settings'),
    'access arguments' => array('admin erp access'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('erp_access_admin_settings'),
  );

  return $items;
}

/*
 * Only show the access menu option on the customer node type
 */
function erp_access_menu_access($node) {
  if ($node->type == 'erp_customer' && user_access('admin erp access')) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Hook called by menu to check
 *
 * @param $nid
 */
function erp_access_manage($form, $node) {
  $form = array();

  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );

  $form['edit'] = array(
    '#type' => 'markup',
    '#value' => erp_access_list($node, ERP_ACCESS_EDIT),
  );

  $form['new_edit_user'] = array(
    '#title' => t('Give user edit permission'),
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete'
  );

  $form['new_edit_user_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add edit user')
  );

  $form['view'] = array(
    '#type' => 'markup',
    '#value' => erp_access_list($node, ERP_ACCESS_VIEW),
  );

  $form['new_view_user'] = array(
    '#title' => t('Give user view permission'),
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete'
  );

  $form['new_view_user_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add view user')
  );

  return $form;
}

function erp_access_manage_submit($form, $form_state) {
  if ($form_state['clicked_button']['#value'] == t('Add edit user')) {
  	$username = $form_state['values']['new_edit_user'];
  	$user = user_load(array('name' => $username));
  	db_query('INSERT INTO {erp_access} (nid, uid, access_type) VALUES (%d, %d, %d)', $form_state['values']['node']->nid, $user->uid, ERP_ACCESS_EDIT);
  }

  if ($form_state['clicked_button']['#value'] == t('Add view user')) {
    $username = $form_state['values']['new_view_user'];
    $user = user_load(array('name' => $username));
    db_query('INSERT INTO {erp_access} (nid, uid, access_type) VALUES (%d, %d, %d)', $form_state['values']['node']->nid, $user->uid, ERP_ACCESS_VIEW);
  }
}

function erp_access_remove($node, $user, $type) {
	db_query('DELETE FROM {erp_access} WHERE nid = %d AND uid = %d AND access_type = %d', $node->nid, $user->uid, $type);

	drupal_goto();
}

function erp_access_list($node, $type) {
	$header = array(t('User'), t('Action'));
	$rows = array();

  $result = db_query('SELECT * FROM {erp_access} WHERE nid = %d AND access_type = %d', $node->nid, $type);

  while ($row = db_fetch_array($result)) {
  	$user = user_load(array('uid' => $row['uid']));
  	if ($user) {
      $rows[] = array($user->name, l(t('remove'), 'node/'. $node->nid .'/erp/remove/'. $user->uid .'/'. $type, array('query' => 'destination=node/'. $node->nid .'/erp')));
  	}
  }

  if (count($rows)) {
    return theme('table', $header, $rows);
  }
  else {
  	return '';
  }
}

/**
 * Return admin items for the ERP Access module
 */
function erp_access_admin_settings() {
  drupal_set_title(t('ERP Access settings'));

  // Retrieve the list of roles
  $result = db_query('SELECT * FROM {role} ORDER BY name');
  while ($role = db_fetch_object($result)) {
    switch ($role->rid) {
      case DRUPAL_ANONYMOUS_RID:
      case DRUPAL_AUTHENTICATED_RID:
        $roles[$role->rid] = t($role->name);
        break;
      default:
        $roles[$role->rid] = $role->name;
    }
  }

  //$default = empty($edit['roles']) ? array() : array_keys($edit['roles']);
  $form['erp_access_view_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Default list of roles to give view access to.'),
    '#default_value' => variable_get('erp_access_view_roles', array()),
    '#options' => $roles,
  );

  $form['erp_access_edit_roles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Default list of roles to give edit access to.'),
    '#default_value' => variable_get('erp_access_edit_roles', array()),
    '#options' => $roles,
  );
  return system_settings_form($form);
}


/**
 * Implementation of hook_node_grants().
 *
 * @param $account
 * @param $op
 */
function erp_access_node_grants($account, $op) {
  $grants = array();

  $edit_roles = variable_get('erp_access_edit_roles', array());
  $view_roles = variable_get('erp_access_view_roles', array());

  $account_roles = array_keys($account->roles);
  // Load role permissions first, edit role overrides all else
  foreach ($edit_roles as $rid => $active) {
    if ($rid == $active && in_array($rid, $account_roles)) {
      $grants['edit_erp_staff_access'][] = 1;
      return $grants; // As its full perms, we can return now for speed
    }
  }

  foreach ($view_roles as $rid => $active) {
    if ($rid == $active && in_array($rid, $account_roles)) {
      $grants['view_erp_staff_access'][] = 1;
    }
  }

  // OK, we're only going to be a restricted user, load the indivudual nodes that they're allowed to view/edit

  // Load edit permissions for this user
  $result = db_query('SELECT nid FROM {erp_access} WHERE uid = %d AND access_type = %d', $account->uid, ERP_ACCESS_EDIT);
  while ($row = db_fetch_array($result)) {
    $grants['edit_erp_access'][] = $row['nid'];
  }

  // Load view permissions for this user
  $result = db_query('SELECT nid FROM {erp_access} WHERE uid = %d AND access_type = %d', $account->uid, ERP_ACCESS_VIEW);
  while ($row = db_fetch_array($result)) {
  	// Only add if we aren't already in there, as edit overrides view anyway
  	if (!is_array($grants['edit_erp_access']) || !in_array($row['nid'], $grants['edit_erp_access'])) {
      $grants['view_erp_access'][] = $row['nid'];
  	}
  }

  return $grants;
}

/**
 * Implementation of hook_node_access_records().
 *
 * @param unknown_type $node
 */
function erp_access_node_access_records($node) {
  if (!erp_access_enabled()) {
    return;
  }

  $grants = array();

  // If its a customer, easy
  if ($node->type == 'erp_customer') {
    $customer_node = $node;
  }
  else {
  	// If there is no customer id, try and figure it ou
    if (!$node->customer_nid) {
      $customer_node = erp_customer_link_locate($node);
    }
    else {
      $customer_node = node_load($node->customer_nid);
    }
  }

  // If there is no associated customer, this must be a std drupal node,
  // which we dont deal with
  if (!$customer_node) {
    return;
  }

  $grants[] = array(
    'realm' => 'view_erp_access',
    'gid' => $customer_node->nid,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
  );

  $grants[] = array(
    'realm' => 'edit_erp_access',
    'gid' => $customer_node->nid,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
  );

  $grants[] = array(
    'realm' => 'view_erp_staff_access',
    'gid' => 1,
    'grant_view' => 1,
    'grant_update' => 0,
    'grant_delete' => 0,
  );

  $grants[] = array(
    'realm' => 'edit_erp_staff_access',
    'gid' => 1,
    'grant_view' => 1,
    'grant_update' => 1,
    'grant_delete' => 1,
  );

  return $grants;
}

/**
 * Implementation of hook_node_access_explain().
 * For Devel module
 *
 * @param unknown_type $row
 */
function erp_access_node_access_explain($row) {
  switch ($row->realm) {
    case 'view_erp_access':
      return t('View access for a customer');
      break;
    case 'edit_erp_access':
      return t('Edit access for a user only');
      break;
    case 'view_erp_staff_access':
      return t('View access for staff');
      break;
    case 'edit_erp_staff_access':
      return t('Edit access for staff');
      break;
  }
}

/**
 * Helper function the tell the node_access_records hook whether the module
 * is being enabled/disabled
 *
 * @param unknown_type $set
 */
function erp_access_enabled($set = NULL) {
  static $enabled = true;
  if ($set !== NULL) {
    $enabled = $set;
  }
  return $enabled;
}

/**
 * Helper function to tell Drupal the the node_access table needs to be rebuilt
 */
function erp_access_enable() {
  node_access_needs_rebuild();
}

/**
 * Helper function to tell Drupal the the node_access table needs to be rebuilt
 * And to set the module status as disabled.
 */
function erp_access_disable() {
  erp_access_enabled(FALSE);
  node_access_needs_rebuild();
}


function erp_access_views_api() {
  return array('api' => 2.0);
}